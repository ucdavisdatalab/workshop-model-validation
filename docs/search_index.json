[["index.html", "Model validation for applied data science Overview", " Model validation for applied data science Wesley Brooks 2021-11-01 Overview YOUR DESCRIPTION, LEARNING GOALS, PREREQUISITES, ETC "],["basic-information.html", "1 Basic information 1.1 What is a model? 1.2 What is model validation?", " 1 Basic information 1.1 What is a model? 1.2 What is model validation? In most basic terms, model validation is to answer the question, “is this model good?” That can have different meanings in different contexts. Validation focuses on ensuring that the model description is accurate to its performance. Another way to think of it is checking model assumptions. So, what kind of assumptions are we talking about? 1.2.1 Typical modeling assumptions There are two broad types of assumptions that underlie most statistical models The expectation of the response variable is a function of the input variables. \\(\\mathbb{E}(Y) = f(X)\\). The response variable has some distribution, like \\(Y\\) is Normal, or binomial, or Poisson. Validating these assumptions also requires that the function \\(f(\\cdot)\\) and the response distribution can be learned from the data. "],["essential-concepts.html", "2 Essential concepts 2.1 In-sample vs. out-of-sample 2.2 Fitting vs. prediction", " 2 Essential concepts So, how can we test (validate) these assumptions? A key problem is that they can’t be tested from within a fitted model. The way statistical estimation works is that you assume the form of a model, and then find the parameters that best match the data and the assumption. Testing requires applying the model to new data in order to see if the predictions match the truth. 2.1 In-sample vs. out-of-sample In-sample and out-of-sample describe data relative to some model. The data are in-sample to the model if the data were used in training that model, and are out-of-sample otherwise. 2.2 Fitting vs. prediction That leads to the key difference between fitting and prediction: fitting is done with in-sample data, and prediction is done with out-of-sample data. "],["model-types.html", "3 Model types 3.1 Logistic regression 3.2 Random forest regression", " 3 Model types We are going to use a couple of example models throughout this workshop. First, a logistic regression model and second, a random forest regression model. 3.1 Logistic regression Logistic regression is a method of estimating the probability of an event occurring. An event is a discrete occurrence that either happens or does not. For example, a subject surviving for at least five years after enrollment in a clinical trial is one example of an event - it either happens or does not. Logistic regression assumes that each event has a binomial distribution where the probabolity of occurrence is \\(p\\), and \\[p = \\exp{X \\beta} / ( 1 + \\exp{X \\beta} ).\\] As hinted above, validating a logistic regression model would involve checking that the observations are independent from a binomial distribution, and that the probability of each event is as above. 3.2 Random forest regression Random forest regression models are an entirely different class of model. There is no linear function like the \\(X \\beta\\) of logistic regression (or, indeed, linear regression). Instead, the \\(f( X )\\) part of the model is constructed from an ensemble of regression trees. Each regression tree is a collection of discrete branches that ultimately lead to conclusions at the end of the chain. Consider the stopping distance example again. One regression tree might include logic like, IF speed &gt; 8 AND speed &lt;= 12 THEN stoping distance is 20 feet. As a forest is made of many trees, a random forest model is made of many regression trees, each of which uses a random portion of the total training data. In fact, the GBM models I’ll use here include some additional “gradient boosting” logic that takes them beyond a basic random forest model, but that I’m going to mostly ignore for our purposes today. The response variable for the random forest model is the number of new COVID-19 admissions on a given day. I’m treating this count as if it follows a Poisson distribution. Thus, the assumptions that must be validated for this model are the relationship \\(\\mathbb{E}(Y) = f( X )\\), and the independence and Poisson distribution of the counts. "],["working-examples.html", "4 Working examples 4.1 Import data", " 4 Working examples 4.1 Import data Let’s import the data for our examples. 4.1.1 COVID-19 admissions Import the data about COVID-19 admissions: # import uses the readr package library( &quot;readr&quot; ) # import the covid data covid = read_csv( &quot;data/covid.csv&quot; ) ## Rows: 518 Columns: 81 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (1): SOURCE_DATA_DATE ## dbl (80): DAY_OF_THE_WEEK, HOSPITAL_CENSUS_M, INDX_UCDH_TEST_PT_CNT, INDX_UC... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. 4.1.2 Import survival data The survival data comes from the German Breast Cancer Study Group, so we will call it the gbsg data set. After importing the data, we need to re-code the time-to-recurrence + censoring variables to a 0-1 binary variable that encodes five-year recurrence-free survival. # read in the gbsg data gbsg = read_csv( &quot;data/gbsg.csv&quot; ) ## Rows: 686 Columns: 11 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## dbl (11): pid, age, meno, size, grade, nodes, pgr, er, hormon, rfstime, status ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. # have we observed five years of recurrence-free survival? gbsg$fys = with(gbsg, ifelse( rfstime &gt; 365*5, 1, ifelse(status == 0, NA, 0))) "],["data-splitting-systems.html", "5 Data splitting systems 5.1 Train/validation split 5.2 Cross-validation", " 5 Data splitting systems To train and validate a model requires that we have in-sample and out-of-sample data, but typically we have just “the data”. There are a couple of approaches to separating that data in in-sample and out-of-sample sets: training/validation splits or cross-validation. 5.1 Train/validation split One solution is to reserve some data for validation, and use what is left for training the model. The split can be random or not - for instance, you may hold back the most recent year of data for validation, or you may randomly sample some proportion (e.g., 30%) of the observations to reserve for validation. 5.2 Cross-validation Cross validation is a kind of repeated training/validation split, which is iterated until all of the data has been used for testing. Each training/validation split may be random or may take data that are grouped according to some meaningful value (often that means resolving one year’s data at a time as validation data). 5.2.1 Combining the two There are times when cross-validation and training/testing validation should be used together. For instance, when cross-validation is used to select model parameters for the best predictive performance, there should also be a validation set that was never used in the cross-validation. That’s so that there are independent data to validate the selection that was based on the CV. "],["validating-the-models-functional-form.html", "6 Validating the model’s functional form", " 6 Validating the model’s functional form tktk "],["validating-the-models-distributional-form.html", "7 Validating the model’s distributional form", " 7 Validating the model’s distributional form tktktk "],["bias-variance-tradeoff.html", "8 Bias-variance tradeoff", " 8 Bias-variance tradeoff The tradeoff between bias and variance is a fundamental concept in machine learning. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
